---
title: "Analysis of 2018-2020 Eden Landing data using new MEM-PEPRMT"
author: "Michael Najarro, adapted by Oikawa"
date: "11/18/2020, adapted June 2021"
output: rmarkdown::github_document
---


```{r}
library(pacman)
p_load(rCTM,
       knitr,
       tidyverse,
       magrittr,
       here,
       R.matlab,
       tictoc,
       gridExtra,
       beepr)
```


# *Phase 1: MEM*

### *Step 1: Run MEM with Cohorts*

```{r}
#import elevation data to environment.
elevation<- read.table(file="./Data_sets/EDENLAND082620.txt",sep=",")

a <- elevation %>%
  rename(record=V1,
         S1=V2,
         S2=V3,
         elevation=V4,
         edcv=V5) %>%
  slice(-25) %>%
  summarise(elev = mean(elevation)*100) %>%
  pull(.)
```



```{r}

#NEW INITIAL COHORT TABLE FOR MEM MODEL FROM JIM HOLMQUIST JULY 2021
rootDepthMax = 30
omPackingDensity = 0.085
mineralPackingDensity = 1.99
rootPackingDensity = omPackingDensity

moonscapeCohorts <- data.frame(age=rep(0, round(rootDepthMax+0.6)), # set all ages to 0
                      fast_OM=rep(0, round(rootDepthMax+0.6)), # Note that fast, slow, and root mass initial conditions are all set to 0
                      slow_OM=rep(0, round(rootDepthMax+0.6)),
                      respired_OM=rep(0, round(rootDepthMax+0.6)),
                      mineral=rep(mineralPackingDensity,round(rootDepthMax+0.6)), # Mineral mass is 100% so equal to the packing density
                      root_mass=rep(0,round(rootDepthMax+0.6)),
                      layer_top=0:((round(rootDepthMax+0.6)-1)), # 1 cm depth increments
                      layer_bottom=1:round(rootDepthMax+0.6)) %>% 
  dplyr::mutate(cumCohortVol = cumsum(layer_bottom-layer_top))
```


```{r}
startYear=2010
#RUN MEM MODEL
#JIM's SET UP JULY 2021
memCohortExample2 <- rCTM::runCohortMem(startYear = 2010,
                                     relSeaLevelRiseInit = 0.24, 
                                     relSeaLevelRiseTotal = 40, 
                                     initElv = 165, 
                                     meanSeaLevel = 110, 
                                     meanSeaLevelDatum = 98.1, 
                                     meanHighWaterDatum = 194.7, 
                                     meanHighHighWaterDatum = 213.3, 
                                     meanHighHighWaterSpringDatum = NA, 
                                     suspendedSediment = .000045, 
                                     lunarNodalAmp = 2.5, 
                                     lunarNodalPhase = 2011.181, 
                                     nFloods = 705.79, 
                                     bMax = 0.09, 
                                     zVegMin = 80, 
                                     zVegMax = 350, 
                                     zVegPeak = NA, 
                                     plantElevationType = "orthometric",
                                     rootToShoot = 2, 
                                     rootTurnover = 0.5, 
                                     abovegroundTurnover = NA, 
                                     speciesCode = NA, 
                                     rootDepthMax = 30, 
                                     shape = "linear", 
                                     omDecayRate = 0.2, 
                                     recalcitrantFrac = 0.35, 
                                     captureRate = 0.275, 
                                     omPackingDensity = 0.085, 
                                     mineralPackingDensity = 1.99, 
                                     initialCohorts = moonscapeCohorts, 
                                     uplandCohorts = NA, 
                                     supertidalCohorts = NA, 
                                     supertidalSedimentInput = NA
                                     )

slow <- tapply(memCohortExample2$cohorts$slow_OM,
           memCohortExample2$cohorts$year,
           FUN = mean)
slow
fast <- tapply(memCohortExample2$cohorts$fast_OM,
           memCohortExample2$cohorts$year,
           FUN = mean)
fast
resp <-tapply(memCohortExample2$cohorts$respired_OM,
           memCohortExample2$cohorts$year,
           FUN = mean)
resp
```


## **Step 2: obtain the sum of slow and fast organic matter pools**

At this point I entirely skip the calculation and downscaling of NPP.

Instead I calculate two important values from MEM to input into the respiration component of PEPRMT. These values will directly correspond to the slow and fast organic matter components of each soil cohort from MEM. The sum of these values approximate the carbon stored within the labile and SOC pools described in the PEPRMT model.


The MEM ouputs for carbon -The slow and fast organic measures - will become inputs for the ecosystem respiration component of PEPRMT. Specifically, they will equate to the sum of slow and fast organic matter that is within one meter below the soil surface at and up to the time of interest (includes all years prior, up to, and include year of interest) in accordinance with the PEPRMT model (see Oikawa 2017) to simulate soil sampling of core data. 

Note thatin previous iterations of MEM-PEPRMT in Rush Ranch, we did not consider the 1 meter depth because the total height of the soil cohorts from MEM were within 1 meter.

The relationship between these pools can be described as follows:

```{r}
y<- tribble(
  ~MEM_Variable, ~Equiv._PEPRMNT_C_Pool, ~PEPRMNT_Variable, ~theta_element,
  "Slow_OM", "Soil Organic Carbon (SOC) Pool", "S2", "theta[5]",
  "Fast_OM", "Labile Carbon Pool", "S1", "theta[6]"
)

kable(y)
```
## **Step 2: check if biomass pools are reasonable**

select out years of interest based on the data we have
grab above and belowground biomass for those years-these need to look reasonable given the site
estimate an annual NPP-should also look reasonable

```{r}
yrs <- c(2016)
yrs <- c(2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023, 2024, 2025, 2026)
#2.c) now extact out the above and below ground biomasses/.
# MEM's units for biomasses is: g OM/year. 
annual_agb <- as.data.frame(
  memCohortExample2$annualTimeSteps) %>%
  filter(between(year, min(yrs)-1, max(yrs)) ) %>%
  select(aboveground_biomass) %>%
  pull(.)

annual_bgb <- as.data.frame(
  memCohortExample2$annualTimeSteps) %>%
  filter(between(year, min(yrs)-1, max(yrs)) ) %>%
  select(belowground_biomass) %>%
  pull(.)

#2.d) create your annual difference NPP.
# latest units used:
# (g OM/cm^2*year) * 100^2 cm^2/M^2 = g OM/m^2*year
#multiply OM by 0.5 to get gCm-2 y-1
an_NPP <- (annual_agb + annual_bgb)*10000*0.5
an_diff_NPP <- numeric(length(an_NPP))

for(y in 2:length(an_NPP)){
  an_diff_NPP[y] <- an_NPP[y] - an_NPP[y-1]
  }
```

Now we sum up cohorts from the table and check if reasonable and use decomposed OM to run Reco PEPRMT model

Here I calculate the depth of the soil accreted for 2018 and filter out the 2018 data from MEM outputs. I also check if the soil is within one meter of the surface.

```{r}
# first identify the values of slow and fast om
# that are: 
#   1. within a meter
#   2. within a time interval of the earliest
#       year up to, and including the year of 
#       interest.

#note:
# Within a given year, all rows before the newest
# incremented "age" (n+1th row) are considered past cohorts,
# so only sum the rows within a year of interest!

#2.a) create table cohort up to year 2017.
cohort <- as.data.frame(memCohortExample2$cohorts)
#cores <-- as.data.frame(memCohortExample2$core)

#2.b) create a column that calculates the height
#       of each layer.
lb <- as.vector(cohort$layer_bottom)
lt <- as.vector(cohort$layer_top)

#2.c) extract out cohort data for 2018.
cohort18 <- cohort %>%
  mutate(depth = lb-lt) %>%
   filter(year == 2018)

cohort19 <- cohort %>%
  mutate(depth = lb-lt) %>%
   filter(year == 2019)

cohort20 <- cohort %>%
  mutate(depth = lb-lt) %>%
   filter(year == 2020)

#2.d) how many layers are exactly one meter
# below the last year of interest (2020) in the depth column?
cohort20 %>%
  summarise(total_depth = sum(depth))


# look at size of respired, fast and slow OM in year 2016; units: gOM/cm3 * 0.5 gC/gOM *1e6 cm3/m3 = g C m-3
percentOM <- 0.5
  cum_vol_cohorts_18<- last(cohort18$cumCohortVol)#Units: cm-3
  cum_respired_OM_18 <- ((sum(cohort18$respired_OM)*percentOM)/cum_vol_cohorts_18)*1e6#g C m-3
  theta5_18=cum_respired_OM_18
  #theta5 <-7200 #reasonable value for EL
  fast_OM_18 <- ((sum(cohort18$fast_OM)*percentOM)/cum_vol_cohorts_18)*1e6#g C m3
  slow_OM_18<- ((sum(cohort18$slow_OM)*percentOM)/cum_vol_cohorts_18)*1e6#g C m3
 
  cum_vol_cohorts_19<- last(cohort19$cumCohortVol)#should be in cm-3
  cum_respired_OM_19 <- ((sum(cohort19$respired_OM)*percentOM)/cum_vol_cohorts_19)*1e6#g C m3
  theta5_19=cum_respired_OM_19
  #theta5 <-7200 #reasonable value for EL
  fast_OM_19 <- ((sum(cohort19$fast_OM)*percentOM)/cum_vol_cohorts_19)*1e6#g C m3
  slow_OM_19<- ((sum(cohort19$slow_OM)*percentOM)/cum_vol_cohorts_19)*1e6#g C m3
  
  
  cum_vol_cohorts_20<- last(cohort20$cumCohortVol)#should be in cm-3
  cum_respired_OM_20 <- ((sum(cohort20$respired_OM)*percentOM)/cum_vol_cohorts_20)*1e6#g C m3
  theta5_20=cum_respired_OM_20
  #theta5 <-7200 #reasonable value for EL
  fast_OM_20 <- ((sum(cohort20$fast_OM)*percentOM)/cum_vol_cohorts_20)*1e6#g C m3
  slow_OM_20<- ((sum(cohort20$slow_OM)*percentOM)/cum_vol_cohorts_20)*1e6#g C m3
```


```{r}
rm(a,
   elevation,
   lb,
   lt,
   fastomPackingDensity,
   omPackingDensity,
   resp,
   fast,
   slow,
   cohort18,
   cohort19,
   cohort20,
   memCohortExample2)
```



# *Phase 2: PEPRMT*

## *Ecosystem Respiration*

### **Step 1: import your data to environment.**



```{r message=FALSE}
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
  mutate(GI = rep(0, nrow(.)),
         Season = rep(0, nrow(.))) %>%
         #wc90_filler = rep(0, nrow(data))
  select(Day_of_year,
         Discont_day_of_year,
         Air_temp_daily_ave_degree_C,
         Water_table_daily_ave_cm,
         PAR_daily_ave_umol_m2_day,
         Reco_gC_m2_day,#dummy
         GPP_gC_m2_day,
         EVI,
         Season,
         Year,#sub in uncertainty when you get it
         Wetland_age_years,
         FPAR) %>%
 filter(between(Year, 2018, 2021)) %>%
  as.data.frame(.)

#THE SEASON VARIABLE IS USUALLY CALCULATED BEFOREHAND IN MATLAB, HERE IS THE MATLAB CODE FOR REFERENCE, BUT IT ASIGNS SEASONS TO DIFFERENT TIMES OF THE YEAR BASED ON THE DAY OF YEAR
# %create season variable
# Season=zeros(1,length(doy_disc))';
# Sel=doy_disc<=88;
# Season(Sel)=1;%WINTER
# Sel=doy_disc<=175&doy_disc>88;
# Season(Sel)=2;%Pre-SPRING--inhibit by 0.55
# Sel=doy_disc<=205&doy_disc>175;
# Season(Sel)=3;%SPRING--inhibit by 0.75
# Sel=doy_disc<=265&doy_disc>205;
# Season(Sel)=4;%SUMMER--inhibit none
# Sel=doy_disc<=335&doy_disc>265;
# Season(Sel)=5;%FALL--inhibit by 0.73
# Sel=doy_disc<=365&doy_disc>335;
# Season(Sel)=1;%WINTER AGAIN
# Season(end)=1;
# figure
# plot(Season,'.')
```
Apply Light Use Efficiency Model
Driven by EVI
will insert here Gwen's model output from Google Earth Engine
as a placeholder for now, I will used obs GPP to run the Reco model
```{r}
#RUN PEPRMT GPP MODEL

#Run a loop for each year in a vector of years where you:
#   - extract year data
#   - store in df
#   - run mem-pep Reco on that data
#   - store df as element of list
  
#3.a) pull your reco function in and setup storage space
source('./Peprmt_files/PEPRMT_final_sys_CO2_GPP.R')

   LUE<-0.65 #empirical parameter calculated for each site usually ranges 0.2-0.9, tends to be higher for wetlands like 0.9
    theta <- c(4, 4, 0, 0, 0,LUE)
    GPP_mod_EL <- PEPRMT_final_sys_CO2_GPP(theta,
                                           data)

  #PLOT RESULTS  
    plot(data$Day_of_year,GPP_mod_EL, type="b", pch=19, col="red", xlab="DOY", ylab="GPP")
# Add a line
lines(data$Day_of_year, data$GPP_gC_m2_day, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(100, 0, legend=c("mod", "obs"),
       #lty = c(1,2),
       col=c("red", "blue"))#, lty=1:2, cex=0.8)

?legend  
  
    #Now save over the GPP with the mod GPP to get ready to run the Reco mod
      data$daily_gpp_mod <- GPP_mod_EL
       #export as csv file
    #write.csv(data,'EL_data_GPP_mod.csv') 
```


### **Step 2: Prepare the data for peprmt Reco script**

In this step, I substitute the tower observed measures of GPP for a vector of zeroes.

Within the PEPRMT Reco function, GPP measures are susbstituted directly fora variable called "C2in", which is then used to calculate the S2 pool of carbon in PEPRMT. By converting the GPP time step measures to zero, the S2 carbon pool depends strictly on the Labiale Carbon Pool, which is the sum of the fast and respired organic matter pools calculated from MEM.
```{r message=FALSE}
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
  mutate(GI = rep(0, nrow(.)),
         Season = rep(0, nrow(.))) %>%
         #wc90_filler = rep(0, nrow(data))
  select(Day_of_year,
         Discont_day_of_year,
         Air_temp_daily_ave_degree_C,
         Water_table_daily_ave_cm,
         #PAR_daily_ave_umol_m2_day,
         #FPAR,
         GPP_gC_m2_day,
         GI,
         Season,
         #wc90_filler,
         Wetland_age_years,
         Year) %>%
 filter(between(Year, 2018, 2021)) %>%
  as.data.frame(.)

# 2.a) substitute the peprmt GPP data with
#       MEM-calculated NPP data; relabel column.
#data[5] <-  c(rep(0, nrow(data)))
data[5] <- GPP_mod_EL
```


### **Step 3: Execute peprmt Reco using sum of fast and slow OM of MEM for 2018**

```{r}
#Run a loop for each year in a vector of years where you:
#   - extract year data
#   - store in df
#   - run mem-pep Reco on that data
#   - store df as element of list


#3.a) pull your reco function in and setup storage space
source('./Peprmt_files/PEPRMT_final_sys_CO2_Reco_reduced.R')
year_vector <- c(2018,2019,2020,2021)
outcome_lst <- list(rep(NA, length(year_vector)))
daysofyear <- list(c(47, 365), c(366,730), c(731,1096),c(1097,1263))
wetland_type <- "coastal" #set to "peatland" for Deltas impounded wetlands
     
#3.b) run the loop
  for(i in 1:length(year_vector)) {
    cohort_i <- cohort %>%
      filter(year == year_vector[i]) %>%
      mutate(depth = layer_bottom - layer_top)
    
    # set up your theta values. note that multiply by 10^6 to
    #convert from gC/cm^3 to gC/m^2, when we consider one meter
    #of soil across all years of interest.
    #THIS PARAMETER COULD ALSO BE MEASURED SOC IN gC/M2
    theta5 <- (mean(cohort_i$slow_OM*.5)/mean(cohort_i$depth*.5))*1000000
    
    #theta6-sum up the MEM modeled respired OM for the given year
    #IF RUNNING FOR IMPOUNDED PEATLAND SET THIS TO 0s
    theta6 <- sum(cohort_i$respired_OM)*1000000
     # run peprmt Reco
    theta <- c(1.5, 0, 1.5, 0, theta5, theta6)
    ER_mod_RR <- PEPRMT_final_sys_CO2_Reco(data,
                                           theta,wetland_type)
    
    # merge peprmt output + obs data
    co2_i <- ER_mod_RR %>%
      as.data.frame(.) %>%
      mutate(DOY = c(data$Discont_day_of_year),
             DOY_cont = c(data$Day_of_year)) %>%
      select(Reco_full,
             DOY, 
             DOY_cont,#,
             S1,
             S2
             ) %>%
      rename(CO2_flux=Reco_full) %>%
      mutate(data_type = c(rep(paste0("mem_pep_",year_vector[i],sep=""),
                               nrow(.)))) 
    
    #filter the data between min & max values of obs data
    #for given year
    s <- unlist(daysofyear[i])
    co2_i <- co2_i %>%
      slice(s[1]:s[2])
    
    #store your dataframe iteration of Reco into the list
    outcome_lst[[i]] <- co2_i
  }


 #export as csv file
   # write.csv(ER_mod_RR,'EL_data_Reco_mod.csv') 
```

```{r}
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
  mutate(GI = rep(0, nrow(.)),
         Season = rep(0, nrow(.))) %>%
         #wc90_filler = rep(0, nrow(data))
  select(Day_of_year,
         Discont_day_of_year,
         Air_temp_daily_ave_degree_C,
         Water_table_daily_ave_cm,
         #PAR_daily_ave_umol_m2_day,
         #FPAR,
         GPP_gC_m2_day,
         GI,
         Season,
         #wc90_filler,
         Wetland_age_years,
         Year,
         Reco_gC_m2_day,
         CO2_gC_m2_day) %>%
 filter(between(Year, 2018, 2021)) %>%
  as.data.frame(.)


#PLOT RESULTS  

    plot(data$Day_of_year,ER_mod_RR$NEE_mod, type="b", pch=19, col="red", xlab="DOY", ylab="NEE")
# Add a line
lines(data$Day_of_year, data$CO2_gC_m2_day, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(100, 0, legend=c("mod", "obs"),
       #lty = c(1,2),
       col=c("red", "blue"))#, lty=1:2, cex=0.8)

  
```


```{r}
#RUN PEPRMT CH4 Model
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
  mutate(GI = rep(0, nrow(.)),
         Season = rep(0, nrow(.))) %>%
         #wc90_filler = rep(0, nrow(data))
  select(Day_of_year,
         Discont_day_of_year,
         Air_temp_daily_ave_degree_C,
         Water_table_daily_ave_cm,
         #PAR_daily_ave_umol_m2_day,
         #FPAR,
         GPP_gC_m2_day,#PLACEHOLDER
         Wetland_age_years,
         Salinity_daily_ave_ppt,#SET TO 0's IF IMPOUNDED FRESHWATER PEATLAND
         Year,#PLACEHOLDER
         FPAR) %>% #PLACEHOLDER
 filter(between(Year, 2018, 2021)) %>%
  as.data.frame(.)

# NOW SUPPLEMENT PLACEHOLDED COLUMNS WITH MODELED GPP AND S1, S2 POOLS
data[5] <- GPP_mod_EL
data[10] <- ER_mod_RR$S1
data[11] <- ER_mod_RR$S2
names(data)[10]<-'S1'
names(data)[11]<-'S2'
names(data)[9]<-'site'#THIS CAN BE USED TO RUN MORE SITES AT A TIME, BUT IF JUST RUNNING 1 LOCATION LEAVE AS 1's 
data$site <- data$site+1
#SULFATE PARAMETER IS SET FROM A LITERATURE REFERENCE-MAY GET UPDATED LATER
sulfate <- 87
theta <- c(15, 0, 15, 0, 15, 0, sulfate)
#call model
source('./Peprmt_files/PEPRMT_CH4_7.3_SI.R')
  
#Execute PEPRMT CH4
  y_model <- CH4_daily_step(theta = theta,
                           data = data,
                           wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
```


```{r}
#PLOT RESULTS
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
  mutate(GI = rep(0, nrow(.)),
         Season = rep(0, nrow(.))) %>%
         #wc90_filler = rep(0, nrow(data))
  select(Day_of_year,
         Discont_day_of_year,
         Air_temp_daily_ave_degree_C,
         Water_table_daily_ave_cm,
         #PAR_daily_ave_umol_m2_day,
         #FPAR,
         GPP_gC_m2_day,
         GI,
         Season,
         #wc90_filler,
         Wetland_age_years,
         Year,
         CH4_gC_m2_day) %>%
 filter(between(Year, 2018, 2021)) %>%
  as.data.frame(.)


data[11]<-y_model$pulse_emission_total
names(data)[11]<-'CH4_mod'

    ggplot(data = data, mapping = aes(x = Day_of_year, y = CH4_mod)) 
    geom_point(alpha = 0.1, color = "blue")
    
    plot(data$Day_of_year,data$CH4_mod, type="b", pch=19, col="red", xlab="DOY", ylab="CH4 (gC m-2 d-1)")
# Add a line
lines(data$Day_of_year, data$CH4_gC_m2_day, type="l", pch=18, col="blue")#, type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("mod", "obs"),
       col=c("red", "blue"))#, lty=1:2, cex=0.8)
```




