Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
PAR_daily_ave_umol_m2_day,
Reco_gC_m2_day,#dummy
GPP_gC_m2_day,
EVI,
Season,
Year,#sub in uncertainty when you get it
Wetland_age_years,
FPAR) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
#THE SEASON VARIABLE IS USUALLY CALCULATED BEFOREHAND IN MATLAB, HERE IS THE MATLAB CODE FOR REFERENCE, BUT IT ASIGNS SEASONS TO DIFFERENT TIMES OF THE YEAR BASED ON THE DAY OF YEAR
# %create season variable
# Season=zeros(1,length(doy_disc))';
# Sel=doy_disc<=88;
# Season(Sel)=1;%WINTER
# Sel=doy_disc<=175&doy_disc>88;
# Season(Sel)=2;%Pre-SPRING--inhibit by 0.55
# Sel=doy_disc<=205&doy_disc>175;
# Season(Sel)=3;%SPRING--inhibit by 0.75
# Sel=doy_disc<=265&doy_disc>205;
# Season(Sel)=4;%SUMMER--inhibit none
# Sel=doy_disc<=335&doy_disc>265;
# Season(Sel)=5;%FALL--inhibit by 0.73
# Sel=doy_disc<=365&doy_disc>335;
# Season(Sel)=1;%WINTER AGAIN
# Season(end)=1;
# figure
# plot(Season,'.')
#RUN PEPRMT GPP MODEL
#Run a loop for each year in a vector of years where you:
#   - extract year data
#   - store in df
#   - run mem-pep Reco on that data
#   - store df as element of list
#3.a) pull your reco function in and setup storage space
source('./Peprmt_files/PEPRMT_final_sys_CO2_GPP.R')
LUE<-0.65 #empirical parameter calculated for each site usually ranges 0.2-0.9, tends to be higher for wetlands like 0.9
theta <- c(4, 4, 0, 0, 0,LUE)
GPP_mod_EL <- PEPRMT_final_sys_CO2_GPP(theta,
data)
#PLOT RESULTS
plot(data$Day_of_year,GPP_mod_EL, type="b", pch=19, col="red", xlab="DOY", ylab="GPP")
# Add a line
lines(data$Day_of_year, data$GPP_gC_m2_day, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(100, 0, legend=c("mod", "obs"),
#lty = c(1,2),
col=c("red", "blue"))#, lty=1:2, cex=0.8)
?legend
#Now save over the GPP with the mod GPP to get ready to run the Reco mod
data$daily_gpp_mod <- GPP_mod_EL
#export as csv file
#write.csv(data,'EL_data_GPP_mod.csv')
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
# 2.a) substitute the peprmt GPP data with
#       MEM-calculated NPP data; relabel column.
#data[5] <-  c(rep(0, nrow(data)))
data[5] <- GPP_mod_EL
#Run a loop for each year in a vector of years where you:
#   - extract year data
#   - store in df
#   - run mem-pep Reco on that data
#   - store df as element of list
#3.a) pull your reco function in and setup storage space
source('./Peprmt_files/PEPRMT_final_sys_CO2_Reco_reduced.R')
year_vector <- c(2018,2019,2020,2021)
outcome_lst <- list(rep(NA, length(year_vector)))
daysofyear <- list(c(47, 365), c(366,730), c(731,1096),c(1097,1263))
wetland_type <- "coastal" #set to "peatland" for Deltas impounded wetlands
#3.b) run the loop
for(i in 1:length(year_vector)) {
cohort_i <- cohort %>%
filter(year == year_vector[i]) %>%
mutate(depth = layer_bottom - layer_top)
# set up your theta values. note that multiply by 10^6 to
#convert from gC/cm^3 to gC/m^2, when we consider one meter
#of soil across all years of interest.
#THIS PARAMETER COULD ALSO BE MEASURED SOC IN gC/M2
theta5 <- (mean(cohort_i$slow_OM*.5)/mean(cohort_i$depth*.5))*1000000
#theta6-sum up the MEM modeled respired OM for the given year
#IF RUNNING FOR IMPOUNDED PEATLAND SET THIS TO 0s
theta6 <- sum(cohort_i$respired_OM)*1000000
# run peprmt Reco
theta <- c(1.5, 0, 1.5, 0, theta5, theta6)
ER_mod_RR <- PEPRMT_final_sys_CO2_Reco(data,
theta,wetland_type)
# merge peprmt output + obs data
co2_i <- ER_mod_RR %>%
as.data.frame(.) %>%
mutate(DOY = c(data$Discont_day_of_year),
DOY_cont = c(data$Day_of_year)) %>%
select(Reco_full,
DOY,
DOY_cont,#,
S1,
S2
) %>%
rename(CO2_flux=Reco_full) %>%
mutate(data_type = c(rep(paste0("mem_pep_",year_vector[i],sep=""),
nrow(.))))
#filter the data between min & max values of obs data
#for given year
s <- unlist(daysofyear[i])
co2_i <- co2_i %>%
slice(s[1]:s[2])
#store your dataframe iteration of Reco into the list
outcome_lst[[i]] <- co2_i
}
#export as csv file
# write.csv(ER_mod_RR,'EL_data_Reco_mod.csv')
#4.a) row bind the elements of loop outcomes together.
bigc02 <- do.call('rbind', outcome_lst)
#4.b) save your S1 and S2s into a separate df, then toss.
s1 <- bigc02$S1
s2 <- bigc02$S2
carbon_pools <- as.data.frame(cbind(s1, s2))
colnames(carbon_pools) <- c("S1", "S2")
#4.c) remove S1 and S2 from bigc02.
bigc02 <-bigc02 %>%
select(-S1,-S2)
#4.d) Bring in the observed Reco data
data2 <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20.csv") %>%
filter(between(Year, 2018, 2021)) %>%
select(Reco_gC_m2_day,
Discont_day_of_year,
Day_of_year) %>%
mutate(data_type = c(rep("obs_data", nrow(.)))) %>%
rename(CO2_flux = Reco_gC_m2_day,
DOY = Discont_day_of_year,
DOY_cont= Day_of_year) %>%
as.data.frame(.)
#4.c) bind loop data with observed data
bigc02 <- bigc02 %>%
as.data.frame(.) %>%
#slice(-(272:783)) %>%
bind_rows(.,data2) %>%
pivot_wider(names_from = data_type,
values_from = CO2_flux) %>%
pivot_longer(c(mem_pep_2018,
mem_pep_2019,
mem_pep_2020,
mem_pep_2021,
obs_data),
names_to = "data_source",
values_to = "Respiration")
#5.a). return a plot of the model ouputs & obs. flux data
ggplot(data=bigc02,
mapping = aes(x = DOY_cont,
y = Respiration,
color = data_source)) +
geom_line(na.rm=TRUE) +
labs(x = "Day of year",
y = expression(paste("Respiration",
" ","(grams C"," ",
m^{-2},day^{-1},")",)),
color = "Respiration Source",
title = "MEM-PEPRMT: Respiration 2018-2021",
subtitle = "data obtained from Eden Landing") +
scale_y_continuous(expand=c(0,0)) +
scale_color_manual(labels = c("Modeled 2018",
"Modeled 2019",
"Modeled 2020",
"Modeled 2021",
"Obs"),
values=c("red",
"blue",
"green4",
"black")) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white")
)
View(bigc02)
View(ER_mod_RR)
View(co2_i)
year_vector[i]
View(data)
#Run a loop for each year in a vector of years where you:
#   - extract year data
#   - store in df
#   - run mem-pep Reco on that data
#   - store df as element of list
#3.a) pull your reco function in and setup storage space
source('./Peprmt_files/PEPRMT_final_sys_CO2_Reco_reduced.R')
year_vector <- c(2018,2019,2020,2021)
outcome_lst <- list(rep(NA, length(year_vector)))
daysofyear <- list(c(47, 365), c(366,730), c(731,1096),c(1097,1263))
wetland_type <- "coastal" #set to "peatland" for Deltas impounded wetlands
#3.b) run the loop
for(i in 1:length(year_vector)) {
cohort_i <- cohort %>%
filter(year == year_vector[i]) %>%
mutate(depth = layer_bottom - layer_top)
# set up your theta values. note that multiply by 10^6 to
#convert from gC/cm^3 to gC/m^2, when we consider one meter
#of soil across all years of interest.
#THIS PARAMETER COULD ALSO BE MEASURED SOC IN gC/M2
theta5 <- (mean(cohort_i$slow_OM*.5)/mean(cohort_i$depth*.5))*1000000
#theta6-sum up the MEM modeled respired OM for the given year
#IF RUNNING FOR IMPOUNDED PEATLAND SET THIS TO 0s
theta6 <- sum(cohort_i$respired_OM)*1000000
# run peprmt Reco
theta <- c(1.5, 0, 1.5, 0, theta5, theta6)
ER_mod_RR <- PEPRMT_final_sys_CO2_Reco(data,
theta,wetland_type)
# merge peprmt output + obs data
co2_i <- ER_mod_RR %>%
as.data.frame(.) %>%
mutate(DOY = c(data$Discont_day_of_year),
DOY_cont = c(data$Day_of_year)) %>%
select(Reco_full,
DOY,
DOY_cont,#,
S1,
S2
) %>%
rename(CO2_flux=Reco_full) %>%
mutate(data_type = c(rep(paste0("mem_pep_",year_vector[i],sep=""),
nrow(.))))
#filter the data between min & max values of obs data
#for given year
s <- unlist(daysofyear[i])
co2_i <- co2_i %>%
slice(s[1]:s[2])
#store your dataframe iteration of Reco into the list
outcome_lst[[i]] <- co2_i
}
#save Reco output into data file
data[10] <- ER_mod_RR$S1
data[11] <- ER_mod_RR$S2
#export as csv file
# write.csv(ER_mod_RR,'EL_data_Reco_mod.csv')
S1<-data[10]
names(data)[10]<-'S1'
names(data)[11]<-'S2'
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv")
View(data)
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year
Reco_gC_m2_day) %>%
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year,
Reco_gC_m2_day) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv")
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year,
Reco_gC_m2_day,
CO2_gC_m2_day) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year,
Reco_gC_m2_day,
CO2_gC_m2_day) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
plot(data$Day_of_year,ER_mod_RR$Reco_full, type="b", pch=19, col="red", xlab="DOY", ylab="GPP")
# Add a line
lines(data$Day_of_year, data$Reco_gC_m2_day, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(100, 0, legend=c("mod", "obs"),
#lty = c(1,2),
col=c("red", "blue"))#, lty=1:2, cex=0.8)
plot(data$Day_of_year,ER_mod_RR$NEE_mod, type="b", pch=19, col="red", xlab="DOY", ylab="NEE")
# Add a line
lines(data$Day_of_year, data$CO2_gC_m2_day, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(100, 0, legend=c("mod", "obs"),
#lty = c(1,2),
col=c("red", "blue"))#, lty=1:2, cex=0.8)
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv")
#RUN PEPRMT CH4 Model
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,#PLACEHOLDER
Wetland_age_years,
Salinity_daily_ave_ppt,#SET TO 0's IF IMPOUNDED FRESHWATER PEATLAND
Year,#PLACEHOLDER
FPAR) %>% #PLACEHOLDER
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
data[5] <- GPP_mod_EL
data[10] <- ER_mod_RR$S1
data[11] <- ER_mod_RR$S2
names(data)[10]<-'S1'
names(data)[11]<-'S2'
#SULFATE PARAMETER IS SET FROM A LITERATURE REFERENCE-MAY GET UPDATED LATER
sulfate <- 87
theta <- c(15, 0, 15, 0, 15, 0, sulfate)
#call model
source('./PEPRMT_Scripts/PEPRMT_CH4_7.3_SI.R')
#call model
source('./Peprmt_files/PEPRMT_CH4_7.3_SI.R')
#Execute PEPRMT CH4
y_model <- CH4_daily_step(theta = theta,
data = data,
wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
#Execute PEPRMT CH4
y_model <- CH4_daily_step(theta = theta,
data = data,
wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
names(data)[9]<-'site'
#Execute PEPRMT CH4
y_model <- CH4_daily_step(theta = theta,
data = data,
wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
wetland_type = 2
R = 8.314 #J K-1 mol-1
#CH4 PARAMETERS
#SOC pool
M_alpha1 = 6.2e13# gC m-3 d-1 originally 6e7 umol C cm-3 s-1 or 6.2 e13 g C m-3 d-1
M_ea1 = (theta[1]+67.1)*1000# parameter in kJ mol-1 multiplied by 1000 = J mol-1
M_km1 =theta[2]+17#g C m-3 originally 1.7e-5 g C cm-3
#Labile C pool
M_alpha2 = 6.2e14# gC m-3 d-1 originally 6e8 umol C cm-3 s-1 or 6.2 e14 g C m-3 d-1
M_ea2 = (theta[3]+71.1)*1000
M_km2 =theta[4]+23#g C m-3 originally 2.3e-5 g C cm-3
#CH4 oxidation parameters
M_alpha3 = 6.2e13# gC m-3 d-1 originally 6e7 umol C cm-3 s-1 or 6.2 e13 g C m-3 d-1
M_ea3 = (theta[5]+75.4)*1000
M_km3 =theta[6]+23#g C m-3 originally 2.3e-5 g C cm-3
kiSO4 = theta[7] #old: 87.99  mg L^-1 = g m-3; Jeong et al. 2009
conc_so4 = 2.712 # grams sulfate / kilgram solution (I interpret as sea water)
#parameter for hydrodynamic flux
k=0.04 #gas transfer velocity(m day-1)
#parameter for plant-mediated transport
Vtrans=0.24#gas transfer velocity through plants(m d-1)
Oxi_factor=0.35#percent oxidized during transport
#empirical factors for inhibition of ch4 production when WT drops
beta1=0.48
beta2=-0.18
beta3=0.0042
#empirical factors for decaying inhibition of CH4 production following first
#flooding of wetland
zeta1=5.1e-6 #7.4e-6
zeta2=0.00058
zeta3=0.11
#---CREATE A SPACE FOR TO COLLECT ITERATIVE RESULTS---#
q <- unique(as.integer(data$site))
outcome_lst <- vector('list', length(q))
i in 1
#insert code here that takes a subset of data
# for each each site, then applies loop
# below for each time step within that site.
#  subset your data here, then create the exogenous variables here
d <- subset(data, site == i)
q
data$site <- "site"
#Execute PEPRMT CH4
y_model <- CH4_daily_step(theta = theta,
data = data,
wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
#---CREATE A SPACE FOR TO COLLECT ITERATIVE RESULTS---#
q <- unique(as.integer(data$site))
q
outcome_lst <- vector('list', length(q))
outcome_lst
#RUN PEPRMT CH4 Model
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,#PLACEHOLDER
Wetland_age_years,
Salinity_daily_ave_ppt,#SET TO 0's IF IMPOUNDED FRESHWATER PEATLAND
Year,#PLACEHOLDER
FPAR) %>% #PLACEHOLDER
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
data[5] <- GPP_mod_EL
data[10] <- ER_mod_RR$S1
data[11] <- ER_mod_RR$S2
names(data)[10]<-'S1'
names(data)[11]<-'S2'
names(data)[9]<-'site'#THIS CAN BE USED TO RUN MORE SITES AT A TIME, BUT IF JUST RUNNING 1 LOCATION LEAVE AS 1's
data$site <- data$site+1
#Execute PEPRMT CH4
y_model <- CH4_daily_step(theta = theta,
data = data,
wetland_type = 2)#SET TO 1 FOR IMPOUNDED FRESHWATER PEATLAND, 2 FOR TIDAL WETLAND
View(y_model)
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv")
#PLOT RESULTS
#bring in data for plotting purposes
data <- read_csv(file="./Data_sets/EL_2018_2020_master_9_30_20_EVI_uncertainty.csv") %>%
mutate(GI = rep(0, nrow(.)),
Season = rep(0, nrow(.))) %>%
#wc90_filler = rep(0, nrow(data))
select(Day_of_year,
Discont_day_of_year,
Air_temp_daily_ave_degree_C,
Water_table_daily_ave_cm,
#PAR_daily_ave_umol_m2_day,
#FPAR,
GPP_gC_m2_day,
GI,
Season,
#wc90_filler,
Wetland_age_years,
Year,
CH4_gC_m2_day) %>%
filter(between(Year, 2018, 2021)) %>%
as.data.frame(.)
View(y_model)
data[11]<-y_model$pulse_emission_total
names(data)[11]<-'CH4_mod'
ggplot(data = data, mapping = aes(x = Day_of_year, y = CH4_mod))
geom_point(alpha = 0.1, color = "blue")
plot(data$Day_of_year,data$CH4_mod, type="b", pch=19, col="red", xlab="DOY", ylab="CH4 (gC m-2 d-1)")
# Add a line
lines(data$Day_of_year, data$CH4_gC_m2_day, type="l", pch=18, col="blue")#, type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("mod", "obs"),
col=c("red", "blue"))#, lty=1:2, cex=0.8)
